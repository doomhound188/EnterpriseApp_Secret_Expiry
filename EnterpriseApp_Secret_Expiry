$ErrorActionPreference = 'continue'
$testing = $true

$scopeURI = "https://graph.microsoft.com/.default"
$tenantID = "Tenant_ID_Here"
$clientID = "Enterprise_App_ID_Here"
$clientSecret = "Enterprise_App_Secret_Here"

$authUrl = "https://login.microsoftonline.com/$($tenantID)/oauth2/v2.0/token"
#$refreshToken = "YOUR_REFRESH_TOKEN"
#$redirectURI = "http://localhost:44385/index.html"

Function Update-AuthToken {
    if ($testing) {
        $sslverify = $false
    } else {
        $sslverify = $true
    }

    $headers = @{
        "Content-Type" = "application/x-www-form-urlencoded"
    }
    $body = @{
        "grant_type" = "client_credentials"
        "scope" = $scopeURI
        "client_id" = $clientID
        "client_secret" = $clientSecret
    }
    
    $response = Invoke-RestMethod -Uri $authUrl -Method Post -Headers $headers -Body $body #-SkipCertificateCheck:$sslverify
    return $response
}

Function Invoke-ApiCall {
    param (
        [string]$endpoint = "/me",
        [string]$httpmethod = "get",
        [object]$body = $null,
        [string]$fullUrl = $null,
        [switch]$testing
    )

    $sslverify = -not $testing

    $headers = @{
        "Authorization" = "$($accessToken.token_type) $($accessToken.access_token)"
        "Content-Type" = "application/json"
    }
    
    if ($fullUrl -ne $null) {
        #Write-Host "Using full URL"
        $apiEndpoint = $fullUrl
    } else {
        #Write-Host "Using endpoint"
        $apiEndpoint = "https://graph.microsoft.com/v1.0$endpoint"
    }

    try {
        $resp = Invoke-RestMethod -Uri $apiEndpoint -Headers $headers -Method $httpmethod -Body $body #-SkipCertificateCheck:$sslverify
        return $resp
    }
    catch {
        Write-Host "An error occurred: $_"
        return $null
    }
}

$accessToken = Update-AuthToken

$data = Invoke-ApiCall -endpoint "/applications/" -httpmethod "get" -fullUrl "https://graph.microsoft.com/v1.0/applications/"
#$data.value | Where-Object { $_.passwordCredentials -ne $null } | Select-Object -ExpandProperty passwordCredentials | Format-List

# for each app, get the app Name, ID and secret expiry date and join together in a single line and if the the app contains more than one secret, sort by expiry date and include secret name
$apps = $data.value | Where-Object { $_.passwordCredentials -ne $null } | Sort-Object -Property appID | ForEach-Object { 
    $app = $_
    $app.passwordCredentials | Sort-Object -Property endDateTime | ForEach-Object {
        [PSCustomObject]@{
            AppID = $app.appID
            AppName = $app.displayName
            SecretID = $_.KeyId
            SecretName = $_.displayName
            SecretExpiry = $_.endDateTime #[datetime]::ParseExact("$_.endDateTime", "yyyy-MM-ddTHH:mm:ss.fffffffZ", [System.Globalization.CultureInfo]::InvariantCulture)
        }
    }
}
#$apps | Format-Table -AutoSize
$apps.SecretExpiry
# Export to CSV
#$apps | Export-Csv -Path "C:\IT\appsecrets.csv" -NoTypeInformation

# Alert when secret is about to expire 30 days remaining 
$apps | Where-Object { $_.SecretExpiry -lt (Get-Date).AddDays(15) } | ForEach-Object {
    $app = $_
    $appSecret = $app.SecretName
    $appID = $app.AppID
    $appSecretID = $app.SecretID
    $appSecretExpiry = $app.SecretExpiry
    Write-Host "Secret $appSecret from app $appID" expires on $appSecretExpiry
}

# remove expired secrets
<# $apps | Where-Object { $_.SecretExpiry -lt (Get-Date) } | ForEach-Object {
    $app = $_
    $appSecret = $app.SecretName
    $appID = $app.AppID
    $appSecretID = $app.SecretID
    $appSecretExpiry = $app.SecretExpiry
    Write-Host "Removing expired secret $appSecret from app $appID" expired on $appSecretExpiry
    Invoke-ApiCall -fullUrl "https://graph.microsoft.com/v1.0/applications/$appID/passwordCredentials/$appSecretID" -httpmethod "delete"
} #>

$apps.SecretExpiry
